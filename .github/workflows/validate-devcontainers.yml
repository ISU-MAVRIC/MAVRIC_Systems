name: Validate Devcontainers

on:
  pull_request:
    paths:
      - '**/devcontainer.json'
      - '.devcontainer/**'
  push:
    branches: [ main ]
    paths:
      - '**/devcontainer.json'
      - '.devcontainer/**'

jobs:
  devcontainer-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Dev Containers CLI
        run: npm install -g @devcontainers/cli

      - name: Find modified devcontainers
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_ref="origin/${{ github.base_ref }}"
          else
            base_ref="${{ github.event.before }}"
          fi

          echo "üîç Checking changes against $base_ref"

          changed=$(git diff --name-only $base_ref ${{ github.sha }} | grep -E 'devcontainer.json|\.devcontainer/' || true)
          folders=$(echo "$changed" | xargs -r -n1 dirname | sort -u)

          {
            echo "folders<<EOF"
            echo "$folders"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build and smoke test modified devcontainers
        if: steps.changes.outputs.folders != ''
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_ref="origin/${{ github.base_ref }}"
          else
            base_ref="${{ github.event.before }}"
          fi

          for devcontainer_path in $(git diff --name-only $base_ref ${{ github.sha }} \
          | grep -E 'devcontainer.json' \
          | sort -u); do

          # Determine workspace folder based on devcontainer location
          # For .devcontainer/devcontainer.json -> workspace is .
          # For path/to/folder/.devcontainer/devcontainer.json -> workspace is path/to/folder
          if [[ "$devcontainer_path" == ".devcontainer/"* ]]; then
            workspace="."
          else
            workspace=$(dirname "$(dirname "$devcontainer_path")")
          fi

          echo "üî® Building devcontainer at $devcontainer_path (workspace: $workspace)"
          devcontainer build \
            --workspace-folder "$workspace" \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max

          echo "üöÄ Running smoke test for $devcontainer_path"
          if [ -f "$workspace/.devcontainer/smoke-test.sh" ]; then
            devcontainer up --workspace-folder "$workspace"
            devcontainer exec \
              --workspace-folder "$workspace" \
              bash -lc "./.devcontainer/smoke-test.sh"
          else
            devcontainer up --workspace-folder "$workspace"
            devcontainer exec \
              --workspace-folder "$workspace" \
              bash -lc "echo '‚úÖ Container started'; ros2 --version || python3 --version || echo 'No runtime check configured'"
          fi
          done

      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d /tmp/.buildx-cache-new ]; then mv /tmp/.buildx-cache-new /tmp/.buildx-cache; fi