name: Validate Devcontainers

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  # Job to determine if we should run validation based on changed files
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.filter.outputs.devcontainer }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for devcontainer changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            devcontainer:
              - '**/.devcontainer/**'

  devcontainer-check:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-run == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Dev Containers CLI
        run: npm install -g @devcontainers/cli

      - name: Find affected devcontainer directories
        id: changes
        run: |
          echo "🔍 Determining changed devcontainers"

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_branch="${{ github.base_ref }}"
            echo "Fetching base branch origin/$base_branch"
            git fetch --no-tags --depth=1 origin "$base_branch"
            base_ref=$(git merge-base "origin/$base_branch" "${{ github.sha }}")
            echo "Using merge-base $base_ref for diff"
          else
            base_ref="${{ github.event.before }}"
            if [ -z "$base_ref" ] || [ "$base_ref" = "0000000000000000000000000000000000000000" ]; then
              echo "Base SHA unavailable; attempting to use previous commit"
              base_ref=$(git rev-list --max-count=1 --skip=1 "${{ github.sha }}" || true)
            fi

            if [ -z "$base_ref" ]; then
              echo "No previous commit found; defaulting to full devcontainer scan"
            else
              echo "Using commit $base_ref for diff"
            fi
          fi

          if [ -n "$base_ref" ] && git cat-file -e "$base_ref^{commit}" 2>/dev/null; then
            changed_files=$(git diff --name-only "$base_ref" "${{ github.sha }}" || true)
          else
            echo "⚠️  Base reference $base_ref not found; treating all devcontainer files as changed"
            changed_files=$(git ls-files '.devcontainer/**' || true)
          fi

          if [ -z "$changed_files" ]; then
            echo "No devcontainer changes detected"
            echo "devcontainer_dirs=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          devcontainer_dirs=""

          while IFS= read -r file; do
            [ -z "$file" ] && continue
            case "$file" in
              .devcontainer/*) ;;
              *) continue ;;
            esac

            search_dir=$(dirname "$file")

            while [ "$search_dir" != "." ] && [ "$search_dir" != "/" ]; do
              if [ -f "$search_dir/devcontainer.json" ]; then
                devcontainer_dirs+="$search_dir\n"
                break
              fi
              parent_dir=$(dirname "$search_dir")
              if [ "$parent_dir" = "$search_dir" ]; then
                break
              fi
              search_dir="$parent_dir"
            done
          done <<< "$changed_files"

          devcontainer_dirs=$(printf '%s' "$devcontainer_dirs" | sed '/^$/d' | sort -u)

          if [ -z "$devcontainer_dirs" ]; then
            echo "No devcontainer directories detected after scanning changes"
            echo "devcontainer_dirs=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Affected devcontainer directories:"
          echo "$devcontainer_dirs"

          {
            echo "devcontainer_dirs<<EOF"
            echo "$devcontainer_dirs"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build and smoke test affected devcontainers
        if: steps.changes.outputs.devcontainer_dirs != ''
        env:
          DEVCONTAINER_DIRS: ${{ steps.changes.outputs.devcontainer_dirs }}
        run: |
          # Read devcontainer directories from previous step
          raw_devcontainer_dirs="$DEVCONTAINER_DIRS"
          raw_devcontainer_dirs="${raw_devcontainer_dirs//$'\\r'/}"
          devcontainer_dirs="${raw_devcontainer_dirs//$'\\n'/$'\n'}"

          if [ -z "$devcontainer_dirs" ]; then
            echo "No devcontainers to build"
            exit 0
          fi

          # Process each affected devcontainer directory
          while IFS= read -r devcontainer_dir; do
            # Trim extraneous whitespace but preserve internal spaces
            devcontainer_dir="${devcontainer_dir#${devcontainer_dir%%[![:space:]]*}}"
            devcontainer_dir="${devcontainer_dir%${devcontainer_dir##*[![:space:]]}}"
            [ -z "$devcontainer_dir" ] && continue
            
            # Verify devcontainer.json exists
            config_path="$devcontainer_dir/devcontainer.json"
            if [ ! -f "$config_path" ]; then
              echo "⚠️  No devcontainer.json found in $devcontainer_dir, skipping"
              continue
            fi

            workspace="."
            config_args=()

            if [[ "$devcontainer_dir" != ".devcontainer" ]]; then
              config_args=(--config "$config_path")
            fi
            
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🔨 Building devcontainer: $devcontainer_dir"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            devcontainer build \
              --workspace-folder "$workspace" \
              "${config_args[@]}" \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max

            echo ""
            echo "🚀 Running smoke test for $devcontainer_dir"
            smoke_test_script="$devcontainer_dir/smoke-test.sh"
            escaped_smoke_test_script=$(printf '%q' "$smoke_test_script")
            
            # Run smoke test with appropriate config
            if [ -f "$smoke_test_script" ]; then
              devcontainer up --workspace-folder "$workspace" "${config_args[@]}"
              devcontainer exec --workspace-folder "$workspace" "${config_args[@]}" bash -lc "$escaped_smoke_test_script"
            else
              devcontainer up --workspace-folder "$workspace" "${config_args[@]}"
              devcontainer exec --workspace-folder "$workspace" "${config_args[@]}" bash -lc "echo '✅ Container started'; ros2 --version 2>/dev/null || python3 --version || echo 'No runtime check configured'"
            fi
            
            echo "✅ Successfully validated $devcontainer_dir"
            echo ""
          done <<< "$devcontainer_dirs"

      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d /tmp/.buildx-cache-new ]; then mv /tmp/.buildx-cache-new /tmp/.buildx-cache; fi

  # This job always runs and provides the required status check
  status-check:
    runs-on: ubuntu-latest
    needs: [check-changes, devcontainer-check]
    if: always()
    steps:
      - name: Determine overall status
        run: |
          echo "Check changes result: ${{ needs.check-changes.outputs.should-run }}"
          echo "Devcontainer check result: ${{ needs.devcontainer-check.result }}"
          
          # If changes were detected but validation failed, fail this check
          if [[ "${{ needs.check-changes.outputs.should-run }}" == "true" && "${{ needs.devcontainer-check.result }}" != "success" ]]; then
            echo "❌ Devcontainer validation failed"
            exit 1
          fi
          
          # If no changes detected, skip is acceptable
          if [[ "${{ needs.check-changes.outputs.should-run }}" == "false" ]]; then
            echo "✅ No devcontainer changes detected - skipping validation"
            exit 0
          fi
          
          # Otherwise, validation succeeded
          echo "✅ Devcontainer validation passed"
