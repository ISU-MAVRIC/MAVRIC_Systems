name: Validate Devcontainers

on:
  pull_request:
    paths:
      - '**/.devcontainer/**'
  push:
    branches: [ main ]
    paths:
      - '**/.devcontainer/**'

jobs:
  devcontainer-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Dev Containers CLI
        run: npm install -g @devcontainers/cli

      - name: Find affected devcontainer directories
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_ref="origin/${{ github.base_ref }}"
          else
            base_ref="${{ github.event.before }}"
          fi

          echo "🔍 Checking changes against $base_ref"

          # Find all changed files under any .devcontainer/ directory
          changed_files=$(git diff --name-only "$base_ref" "${{ github.sha }}" | grep '\.devcontainer/' || true)
          
          if [ -z "$changed_files" ]; then
            echo "No devcontainer changes detected"
            echo "devcontainer_dirs=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Determine which devcontainer directories were affected
          # Extract unique devcontainer directories from changed files
          devcontainer_dirs=$(echo "$changed_files" | sed -E 's|(.*/\.devcontainer((/[^/]+)*)?)/.*|\1|' | sort -u)

          echo "Affected devcontainer directories:"
          echo "$devcontainer_dirs"

          # Store as output (newline-separated list)
          {
            echo "devcontainer_dirs<<EOF"
            echo "$devcontainer_dirs"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build and smoke test affected devcontainers
        if: steps.changes.outputs.devcontainer_dirs != ''
        run: |
          # Read devcontainer directories from previous step
          devcontainer_dirs=$(cat << 'EOF'
          ${{ steps.changes.outputs.devcontainer_dirs }}
          EOF
          )

          if [ -z "$devcontainer_dirs" ]; then
            echo "No devcontainers to build"
            exit 0
          fi

          # Process each affected devcontainer directory
          while IFS= read -r devcontainer_dir; do
            [ -z "$devcontainer_dir" ] && continue
            
            # Verify devcontainer.json exists
            if [ ! -f "$devcontainer_dir/devcontainer.json" ]; then
              echo "⚠️  No devcontainer.json found in $devcontainer_dir, skipping"
              continue
            fi

            workspace="."
            
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🔨 Building devcontainer: $devcontainer_dir"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # Build with appropriate config
            if [[ "$devcontainer_dir" == ".devcontainer" ]]; then
              # Default devcontainer (no --config needed)
              devcontainer build \
                --workspace-folder "$workspace" \
                --cache-from type=local,src=/tmp/.buildx-cache \
                --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max
            else
              # Variant devcontainer in subdirectory
              devcontainer build \
                --workspace-folder "$workspace" \
                --config "$devcontainer_dir" \
                --cache-from type=local,src=/tmp/.buildx-cache \
                --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max
            fi

            echo ""
            echo "🚀 Running smoke test for $devcontainer_dir"
            smoke_test_script="$devcontainer_dir/smoke-test.sh"
            
            # Run smoke test with appropriate config
            if [[ "$devcontainer_dir" == ".devcontainer" ]]; then
              if [ -f "$smoke_test_script" ]; then
                devcontainer up --workspace-folder "$workspace"
                devcontainer exec --workspace-folder "$workspace" bash -lc "$smoke_test_script"
              else
                devcontainer up --workspace-folder "$workspace"
                devcontainer exec --workspace-folder "$workspace" bash -lc "echo '✅ Container started'; ros2 --version 2>/dev/null || python3 --version || echo 'No runtime check configured'"
              fi
            else
              if [ -f "$smoke_test_script" ]; then
                devcontainer up --workspace-folder "$workspace" --config "$devcontainer_dir"
                devcontainer exec --workspace-folder "$workspace" --config "$devcontainer_dir" bash -lc "$smoke_test_script"
              else
                devcontainer up --workspace-folder "$workspace" --config "$devcontainer_dir"
                devcontainer exec --workspace-folder "$workspace" --config "$devcontainer_dir" bash -lc "echo '✅ Container started'; ros2 --version 2>/dev/null || python3 --version || echo 'No runtime check configured'"
              fi
            fi
            
            echo "✅ Successfully validated $devcontainer_dir"
            echo ""
          done <<< "$devcontainer_dirs"

      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d /tmp/.buildx-cache-new ]; then mv /tmp/.buildx-cache-new /tmp/.buildx-cache; fi